"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_dnd_1 = require("react-dnd");
const itemContext_1 = __importDefault(require("./itemContext"));
function useDrop(spec) {
    const connectedDropRef = react_1.default.useRef();
    const wasHoveredRef = react_1.default.useRef(false);
    const { id, type, onHoverBegin, onHoverEnd } = react_1.default.useContext(itemContext_1.default);
    const rest = __rest(spec || {}, []);
    const [collectedProps, originalConnectDropTarget] = react_dnd_1.useDrop(Object.assign(Object.assign({}, rest), { accept: type, collect: (monitor) => {
            const hovered = monitor.isOver({ shallow: true });
            return Object.assign({ hovered }, (spec && spec.collect ? spec.collect(monitor) : {}));
        } }));
    react_1.default.useEffect(() => {
        if (collectedProps.hovered) {
            onHoverBegin(id, connectedDropRef);
            wasHoveredRef.current = true;
        }
        else if (wasHoveredRef.current === true) {
            onHoverEnd(id);
        }
    }, [id, collectedProps.hovered, onHoverBegin, onHoverEnd]);
    const connectDropTarget = (...args) => {
        const result = originalConnectDropTarget(...args);
        // @ts-ignore
        connectedDropRef.current = result;
        return result;
    };
    // @ts-ignore
    return [collectedProps, connectDropTarget];
}
exports.default = useDrop;
